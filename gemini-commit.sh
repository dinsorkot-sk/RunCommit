#!/bin/bash

# ‡πÇ‡∏´‡∏•‡∏î ENV ‡∏à‡∏≤‡∏Å .env (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
if [ -f .env ]; then
  . ./.env
fi

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API KEY ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
if [ -z "$GEMINI_API_KEY" ]; then
  echo "‚ùå ERROR: GEMINI_API_KEY is not set. Please add it to your .env file or export it."
  exit 1
fi

# ‡∏≠‡πà‡∏≤‡∏ô diff ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å staged
DIFF=$(git diff --cached --no-color --no-ext-diff)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ diff ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if [ -z "$DIFF" ]; then
  echo "‚úÖ No changes staged for commit. Nothing to do."
  exit 0
fi

# ----- ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON Payload ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ jq -----
# 1. Escape backslashes (\) -> \\
# 2. Escape double quotes (") -> \"
# 3. ‡πÅ‡∏õ‡∏•‡∏á newlines (‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà) ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ \n
ESCAPED_DIFF=$(echo "$DIFF" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | awk '{printf "%s\\n", $0}')

# 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON Payload ‡πÄ‡∏õ‡πá‡∏ô string
JSON_PAYLOAD=$(cat <<EOF
{
  "contents": [
    {
      "parts": [
        {
          "text": "Write a concise and clear Git commit message in Conventional Commits format for this diff:\n\n\`\`\`diff\n$ESCAPED_DIFF\n\`\`\`"
        }
      ]
    }
  ]
}
EOF
)

# ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gemini API
# ‡πÄ‡∏û‡∏¥‡πà‡∏° -k (--insecure) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ certificate ‡∏ö‡∏ô Windows (CRYPT_E_NO_REVOCATION_CHECK)
RESPONSE=$(curl -sfSk -X POST \
  -H "Content-Type: application/json" \
  -d "$JSON_PAYLOAD" \
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ curl ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if [ $? -ne 0 ]; then
  echo -e "\n‚ùå ERROR: Failed to get a response from Gemini API."
  echo "Please check your API key, internet connection, and network/firewall settings."
  exit 1
fi


# ----- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å JSON Response ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ jq -----
MESSAGE=$(echo "$RESPONSE" | grep -oP '"text":\s*"\K(.*?)(?=")' | head -n 1)

# ‡πÅ‡∏õ‡∏•‡∏á escape sequence ‡πÄ‡∏ä‡πà‡∏ô \n ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡∏à‡∏£‡∏¥‡∏á ‡πÜ
MESSAGE=$(echo -e "$MESSAGE")

# ‡∏•‡∏ö backticks ‡πÅ‡∏•‡∏∞ code fences (```diff, ``` ‡∏Ø‡∏•‡∏Ø)
MESSAGE=$(echo "$MESSAGE" | sed '/^```/d')

if [ -z "$MESSAGE" ]; then
    echo -e "\n‚ùå ERROR: Could not parse the commit message from the API response."
    echo -e "\nüì¶ RAW RESPONSE:"
    echo "$RESPONSE"
    exit 1
fi

# ‡πÅ‡∏™‡∏î‡∏á commit message ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
echo -e "\nüì• Suggested commit message:\n--------------------------"
echo -e "$MESSAGE"
echo "--------------------------"

# ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô commit
read -p "Do you want to commit with this message? [Y/n]: " CONFIRM
CONFIRM=${CONFIRM:-Y}

if [[ $CONFIRM =~ ^[Yy]$ ]]; then
  git commit -m "$MESSAGE"
  echo "‚úÖ Commit successful."
else
  echo "‚ùå Commit cancelled."
fi
