#!/bin/bash

# ‡πÇ‡∏´‡∏•‡∏î ENV ‡∏à‡∏≤‡∏Å .env ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
if [ -f .env ]; then
  export $(grep -v '^#' .env | xargs)
fi

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API KEY ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if [ -z "$GEMINI_API_KEY" ]; then
  echo "‚ùå ERROR: GEMINI_API_KEY is not set. Please add it to your .env file or export it."
  exit 1
fi

# ‡∏≠‡πà‡∏≤‡∏ô diff ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å staged
DIFF=$(git diff --cached --no-color --no-ext-diff)

# ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ diff ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞ add ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if [ -z "$DIFF" ]; then
  echo "‚úÖ No changes staged for commit."
  read -p "Do you want to add all changes? [Y/n]: " CONFIRM
  CONFIRM=${CONFIRM:-Y}
  if [[ $CONFIRM =~ ^[Yy]$ ]]; then
    git add .
    echo "‚úÖ Files added."
    DIFF=$(git diff --cached --no-color --no-ext-diff)
    if [ -z "$DIFF" ]; then
      echo "‚ùå Nothing to commit even after adding."
      exit 0
    fi
  else
    echo "‚ùå Add cancelled."
    exit 0
  fi
fi

# Escape DIFF ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ jq)
ESCAPED_DIFF=$(printf '%s\n' "$DIFF" | sed 's/\\/\\\\/g; s/"/\\"/g; s/$/\\n/' | tr -d '\n')

# ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON Payload
read -r -d '' JSON_PAYLOAD <<EOF
{
  "contents": [
    {
      "parts": [
        {
          "text": "Write a concise and clear Git commit message in Conventional Commits format for this diff:\\n\\n\`\`\`diff\\n$ESCAPED_DIFF\\n\`\`\`"
        }
      ]
    }
  ]
}
EOF

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini API
RESPONSE=$(curl -sfSk -X POST \
  -H "Content-Type: application/json" \
  -d "$JSON_PAYLOAD" \
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ curl ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if [ $? -ne 0 ]; then
  echo -e "\n‚ùå ERROR: Failed to get a response from Gemini API."
  exit 1
fi

# ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° commit message ‡∏≠‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ jq
MESSAGE=$(echo "$RESPONSE" | grep -oP '"text":\s*"\K(.*?)(?=")' | head -n 1)
MESSAGE=$(echo -e "$MESSAGE" | sed '/^```/d')

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if [ -z "$MESSAGE" ]; then
  echo -e "\n‚ùå ERROR: Could not parse commit message from API response."
  echo -e "\nüì¶ RAW RESPONSE:"
  echo "$RESPONSE"
  exit 1
fi

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° commit ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
echo -e "\nüì• Suggested commit message:"
echo "----------------------------------------"
echo "$MESSAGE"
echo "----------------------------------------"

# ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£ commit
read -p "Do you want to commit with this message? [Y/n]: " CONFIRM
CONFIRM=${CONFIRM:-Y}
if [[ $CONFIRM =~ ^[Yy]$ ]]; then
  git commit -m "$MESSAGE"
  echo "‚úÖ Commit successful."
else
  echo "‚ùå Commit cancelled."
  exit 0
fi

# ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£ push
read -p "Do you want to push to remote? [Y/n]: " CONFIRM
CONFIRM=${CONFIRM:-Y}
if [[ $CONFIRM =~ ^[Yy]$ ]]; then
  git push
  echo "‚úÖ Push successful."
else
  echo "‚ùå Push cancelled."
fi
